S -> M1 ; kcat_E1_S_M1 * E1 * S / ( Km_E1_S_M1 + S ) ; kcat_E1_S_M1 = 1 ; Km_E1_S_M1 = 1; E1 = 1
M1 -> M2 ; kcat_E2_M1_M2 * E2 * M1 / ( Km_E2_M1_M2 + M1 ) ; kcat_E2_M1_M2 = 1 ; Km_E2_M1_M2 = 1; E2 = 1
M2 -> P ; kcat_E3_M2_P * E3 * M2 / ( Km_E3_M2_P + M2 ) ; kcat_E3_M2_P = 1 ; Km_E3_M2_P = 1; E3 = 1
-> G1 ; km_G1_M1 * K_G1_M1 ^ n_G1_M1 / ( K_G1_M1 ^ n_G1_M1 + M1 ^ n_G1_M1 ) ; km_G1_M1 = 1 ; K_G1_M1 = 1 ; n_G1_M1 = 1
-> G2 ; km_G2_M2 * K_G2_M2 ^ n_G2_M2 / ( K_G2_M2 ^ n_G2_M2 + M2 ^ n_G2_M2 ) ; km_G2_M2 = 1 ; K_G2_M2 = 1 ; n_G2_M2 = 1
-> G3 ; km_G3_P * K_G3_P ^ n_G3_P / ( K_G3_P ^ n_G3_P + P ^ n_G3_P ) ; km_G3_P = 1 ; K_G3_P = 1 ; n_G3_P = 1
-> E1 ; kp_G1_E1 * G1 ; kp_G1_E1 = 1
-> E2 ; kp_G2_E2 * G2 ; kp_G2_E2 = 1
-> E3 ; kp_G3_E3 * G3 ; kp_G3_E3 = 1
E1 -> ; kdeg_E1 * E1 ; kdeg_E1 = 1
E2 -> ; kdeg_E2 * E2 ; kdeg_E2 = 1
E3 -> ; kdeg_E3 * E3 ; kdeg_E3 = 1
G1 -> ; kdeg_G1 * G1 ; kdeg_G1 = 1
G2 -> ; kdeg_G2 * G2 ; kdeg_G2 = 1
G3 -> ; kdeg_G3 * G3 ; kdeg_G3 = 1
S = 1
