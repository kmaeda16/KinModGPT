You are a program that converts biochemical reactions written in natural language into Antimony language. First, remember the following conversion rules.

# Conversion rules
| Natural language | Antimony language | 
| E catalyzes the conversion of X to Y | X -> Y ; kcat_E_X_Y * E * X / ( Km_E_X_Y + X ) ; kcat_E_X_Y = 1 ; Km_E_X_Y = 1; E = 1 |
| X is phosphorylated | X -> X_P ; Vp_X * X / ( Km_X + X ) ; Vp_X = 1 ; Km_X = 1 |
| X is converted into Y | X -> Y ; kc_X_Y * X; kc_X_Y = 1 |
| X and Y bind to form Z | X + Y -> Z ; ka_X_Y_Z * X * Y ; ka_X_Y_Z = 1 |
| X dissociates into Y and Z | X -> Y + Z ; kd_X_Y_Z * X ; kd_X_Y_Z = 1 |
| X is produced (or transcribed) | -> X ; km_X ; km_X  = 1 |
| Expression of X is repressed (or negatively regulated or downregulated) by R | -> X ; km_X_R * K_X_R ^ n_X_R / ( K_X_R ^ n_X_R + R ^ n_X_R ) ; km_X_R = 1 ; K_X_R = 1 ; n_X_R = 1 |
| Expression of X is activated (or positively regulated or upregulated) by A | -> X ; km_X_A * A ^ n_X_A / ( K_X_A ^ n_X_A + A ^ n_X_A ) ; km_X_A = 1 ; K_X_A = 1 ; n_X_A = 1 |
| Y is translated from X | -> Y ; kp_X_Y * X ; kp_X_Y = 1 |
| X degrades (or decays) | X -> ; kdeg_X * X ; kdeg_X = 1 |
| X (concentration) is Y M (or mM or uM or nM or pM) | X = Y |

# Examples
"The expression of G is negatively regulated by R." is converted into "-> G ; km_G_R * K_G_R ^ n_G_R / ( K_G_R ^ n_G_R + R ^ n_G_R ) ; km_G_R = 1 ; K_G_R = 1 ; n_G_R = 1"
"G is upregulated by A." is converted into "-> G ; km_G_A * A ^ n_G_A / ( K_G_A ^ n_G_A + A ^ n_G_A ) ; km_G_A = 1 ; K_G_A = 1 ; n_G_A = 1"

Using the conversion rules provided, convert the biochemical reactions listed below into Antimony language. After converting each reaction, create a bullet point list that includes all the resulting expressions. In the list, show one reaction per line. No need to provide further explanations, just present the list. Start each line with '-'.

Molecules of M bind to form E, and E dissociates back into two Ms. Additionally, E and S can bind to form ES, which then dissociates back into E and S, while E and P can bind to form EP, which dissociates back into E and P. Furthermore, ES can be converted into E and P. E and I can also bind to form EI, which dissociates back into E and I. Finally, EI is converted into EJ.

- M + M -> E ; ka_M_M_E * M * M ; ka_M_M_E = 1
- E -> M + M ; kd_E_M_M * E ; kd_E_M_M = 1
- E + S -> ES ; ka_E_S_ES * E * S ; ka_E_S_ES = 1
- ES -> E + S ; kd_ES_E_S * ES ; kd_ES_E_S = 1
- E + P -> EP ; ka_E_P_EP * E * P ; ka_E_P_EP = 1
- EP -> E + P ; kd_EP_E_P * EP ; kd_EP_E_P = 1
- ES -> E + P ; kc_ES_E_P * ES ; kc_ES_E_P = 1
- E + I -> EI ; ka_E_I_EI * E * I ; ka_E_I_EI = 1
- EI -> E + I ; kd_EI_E_I * EI ; kd_EI_E_I = 1
- EI -> EJ ; kc_EI_EJ * EI ; kc_EI_EJ = 1
####
